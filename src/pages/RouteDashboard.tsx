import { useState, useEffect } from 'react'
import { useNavigate } from 'react-router-dom'
import { useAuth } from '@/contexts/AuthContext'
import { useIsAdmin } from '@/hooks/useIsAdmin'
import { useUserFlightHours } from '@/hooks/useUserFlightHours'
import { useRouteSteps } from '@/hooks/useRouteSteps'
import { 
  DndContext, 
  DragEndEvent, 
  closestCenter,
  KeyboardSensor,
  PointerSensor,
  useSensor,
  useSensors
} from '@dnd-kit/core'
import {
  arrayMove,
  SortableContext,
  sortableKeyboardCoordinates,
  verticalListSortingStrategy
} from '@dnd-kit/sortable'
import Header from '@/components/layout/Header'
import { SortableRouteStepCard } from '@/components/SortableRouteStepCard'
import { EditRouteStepDialog } from '@/components/dialogs/EditRouteStepDialog'
import { StepTemplateSelectionDialog } from '@/components/dialogs/StepTemplateSelectionDialog'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { 
  Route, 
  Plus, 
  ArrowDown,
  Loader2,
  Trophy,
  Settings
} from 'lucide-react'
import * as icons from 'lucide-react'

export default function RouteDashboard() {
  const { user } = useAuth()
  const { isAdmin, loading } = useIsAdmin()
  const { 
    routeSteps, 
    loading: stepsLoading, 
    saveRouteStep, 
    deleteRouteStep, 
    reorderRouteSteps 
  } = useRouteSteps()
  const navigate = useNavigate()
  
  // Edit dialog state
  const [editDialogOpen, setEditDialogOpen] = useState(false)
  const [editingStep, setEditingStep] = useState<any>(null)
  
  // Template selection dialog state
  const [templateDialogOpen, setTemplateDialogOpen] = useState(false)
  
  // Expansion state for cards
  const [expandedCards, setExpandedCards] = useState<Record<string, boolean>>({})

  // Drag and drop sensors
  const sensors = useSensors(
    useSensor(PointerSensor),
    useSensor(KeyboardSensor, {
      coordinateGetter: sortableKeyboardCoordinates,
    })
  )

  const handleDragEnd = (event: DragEndEvent) => {
    const { active, over } = event

    if (active.id !== over?.id) {
      const oldIndex = routeSteps.findIndex(step => step.id === active.id)
      const newIndex = routeSteps.findIndex(step => step.id === over?.id)
      
      const newOrder = arrayMove(routeSteps, oldIndex, newIndex).map(step => step.id!)
      reorderRouteSteps(newOrder)
    }
  }

  // Handle redirect logic in useEffect to avoid render-time navigation
  useEffect(() => {
    if (!loading && (!user || !isAdmin)) {
      navigate('/')
    }
  }, [user, isAdmin, loading, navigate])

  // Show loading state while checking admin status
  if (loading || stepsLoading) {
    return (
      <div className="min-h-screen bg-background">
        <Header />
        <main className="container mx-auto px-4 py-8">
          <div className="flex items-center justify-center min-h-[400px]">
            <div className="flex items-center space-x-2">
              <Loader2 className="h-5 w-5 animate-spin" />
              <span>Loading dashboard...</span>
            </div>
          </div>
        </main>
      </div>
    )
  }

  // Return null if not authorized (navigation happens in useEffect)
  if (!user || !isAdmin) {
    return null
  }

  // Edit handlers
  const handleEditStep = (step: any) => {
    setEditingStep(step)
    setEditDialogOpen(true)
  }

  const handleSaveStep = async (updatedStep: any) => {
    try {
      await saveRouteStep(updatedStep)
    } catch (error) {
      console.error('Error saving step:', error)
    }
  }

  // Template selection handlers
  const handleAddNewStep = () => {
    setEditingStep(null) // Clear any existing editing state
    setEditDialogOpen(false) // Ensure edit dialog is closed
    setTemplateDialogOpen(true)
  }

  const handleSelectTemplate = async (template: any) => {
    try {
      // Create new step from template with next order number
      const nextOrderNumber = Math.max(...routeSteps.map(s => s.orderNumber), 0) + 1
      
      const newStep = {
        ...template.defaultStructure,
        id: '', // Will be generated by the database
        orderNumber: nextOrderNumber,
        icon: template.icon,
        nextSteps: [],
        connectedFrom: []
      }
      
      await saveRouteStep(newStep)
    } catch (error) {
      console.error('Error creating step from template:', error)
    }
  }

  const handleDeleteStep = async (stepId: string) => {
    if (window.confirm('Are you sure you want to delete this route step? This action cannot be undone.')) {
      await deleteRouteStep(stepId)
    }
  }

  const toggleCardExpansion = (stepId: string) => {
    setExpandedCards(prev => ({
      ...prev,
      [stepId]: !prev[stepId]
    }))
  }

  return (
    <div className="min-h-screen bg-background">
      <Header />
      <main className="container mx-auto px-4 py-8">
        <div className="mb-8">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center space-x-2">
              <Route className="h-6 w-6 text-primary" />
              <h1 className="text-3xl font-bold">Route Dashboard</h1>
              <Badge variant="secondary">Administrator</Badge>
            </div>
            <div className="flex gap-2">
              <Button onClick={handleAddNewStep}>
                <Plus className="mr-2 h-4 w-4" />
                Add New Step
              </Button>
            </div>
          </div>
          <p className="text-muted-foreground">
            Configure career path routes and steps for aspiring airline pilots
          </p>
        </div>

        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3 mb-8">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Total Steps</CardTitle>
              <Route className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{routeSteps.length}</div>
              <p className="text-xs text-muted-foreground">
                Active route steps
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Published</CardTitle>
              <Trophy className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                {routeSteps.filter(step => step.status === 'published').length}
              </div>
              <p className="text-xs text-muted-foreground">
                Live for customers
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Draft Steps</CardTitle>
              <Settings className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                {routeSteps.filter(step => step.status === 'draft').length}
              </div>
              <p className="text-xs text-muted-foreground">
                In development
              </p>
            </CardContent>
          </Card>
        </div>

        <div className="space-y-6">
          <div className="flex items-center justify-between">
            <h2 className="text-2xl font-semibold">Career Path Steps</h2>
            <div className="flex items-center space-x-2">
              <Badge variant="outline">Drag to reorder</Badge>
            </div>
          </div>

          <DndContext 
            sensors={sensors}
            collisionDetection={closestCenter}
            onDragEnd={handleDragEnd}
          >
            <SortableContext 
              items={routeSteps.map(step => step.id!).filter(Boolean)} 
              strategy={verticalListSortingStrategy}
            >
              <div className="space-y-4">
                {routeSteps.map((step, index) => {
                  if (!step.id) return null // Skip steps without IDs
                  
                  return (
                    <div key={step.id}>
                      <SortableRouteStepCard
                        step={step}
                        isExpanded={expandedCards[step.id] || false}
                        onToggleExpansion={() => toggleCardExpansion(step.id!)}
                        onEdit={() => handleEditStep(step)}
                        onDelete={() => handleDeleteStep(step.id!)}
                      />
                      
                      {/* Only show arrows between first two cards */}
                      {index < 2 && index < routeSteps.length - 1 && (
                        <div className="flex justify-center py-2">
                          <div className="w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center">
                            <ArrowDown className="h-4 w-4 text-primary" />
                          </div>
                        </div>
                      )}
                    </div>
                  )
                })}
              </div>
            </SortableContext>
          </DndContext>
        </div>


        <EditRouteStepDialog
          step={editingStep}
          open={editDialogOpen}
          onOpenChange={setEditDialogOpen}
          onSave={handleSaveStep}
        />

        <StepTemplateSelectionDialog
          open={templateDialogOpen}
          onOpenChange={setTemplateDialogOpen}
          onSelectTemplate={handleSelectTemplate}
        />
      </main>
    </div>
  )
}