import { useState, useEffect } from 'react'
import { useNavigate } from 'react-router-dom'
import { useAuth } from '@/contexts/AuthContext'
import { useIsAdmin } from '@/hooks/useIsAdmin'
import { useUserFlightHours } from '@/hooks/useUserFlightHours'
import { useRouteSteps } from '@/hooks/useRouteSteps'
import Header from '@/components/layout/Header'
import { EditRouteStepDialog } from '@/components/dialogs/EditRouteStepDialog'
import { StepTemplateSelectionDialog } from '@/components/dialogs/StepTemplateSelectionDialog'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Checkbox } from '@/components/ui/checkbox'
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog"
import { 
  Route, 
  Plus, 
  Edit3, 
  ArrowRight,
  Loader2,
  GraduationCap,
  Stethoscope,
  Plane,
  Trophy,
  MapPin,
  Settings,
  ChevronDown,
  ChevronUp,
  Trash2
} from 'lucide-react'

// Icon mapping
const iconMap = {
  GraduationCap,
  Stethoscope,
  Plane,
  Trophy
}

export default function RouteDashboard() {
  const { user } = useAuth()
  const { isAdmin, loading } = useIsAdmin()
  const { totalHours } = useUserFlightHours()
  const { routeSteps, loading: stepsLoading, saveRouteStep, updateStepDetailChecked, deleteRouteStep } = useRouteSteps()
  const navigate = useNavigate()
  
  // Edit dialog state
  const [editDialogOpen, setEditDialogOpen] = useState(false)
  const [editingStep, setEditingStep] = useState<any>(null)
  
  // Template selection dialog state
  const [templateDialogOpen, setTemplateDialogOpen] = useState(false)
  
  // Expansion state for cards
  const [expandedCards, setExpandedCards] = useState<Set<string>>(new Set())

  // Handle redirect logic in useEffect to avoid render-time navigation
  useEffect(() => {
    if (!loading && (!user || !isAdmin)) {
      navigate('/')
    }
  }, [user, isAdmin, loading, navigate])

  // Show loading state while checking admin status
  if (loading || stepsLoading) {
    return (
      <div className="min-h-screen bg-background">
        <Header />
        <main className="container mx-auto px-4 py-8">
          <div className="flex items-center justify-center min-h-[400px]">
            <div className="flex items-center space-x-2">
              <Loader2 className="h-5 w-5 animate-spin" />
              <span>Loading dashboard...</span>
            </div>
          </div>
        </main>
      </div>
    )
  }

  // Return null if not authorized (navigation happens in useEffect)
  if (!user || !isAdmin) {
    return null
  }

  // Edit handlers
  const handleEditStep = (step: any) => {
    setEditingStep(step)
    setEditDialogOpen(true)
  }

  const handleSaveStep = async (updatedStep: any) => {
    try {
      await saveRouteStep(updatedStep)
    } catch (error) {
      console.error('Error saving step:', error)
    }
  }

  // Template selection handlers
  const handleAddNewStep = () => {
    setTemplateDialogOpen(true)
  }

  const handleSelectTemplate = async (template: any) => {
    try {
      // Create new step from template with next order number
      const nextOrderNumber = Math.max(...routeSteps.map(s => s.orderNumber), 0) + 1
      
      const newStep = {
        ...template.defaultStructure,
        id: '', // Will be generated by the database
        orderNumber: nextOrderNumber,
        icon: template.icon,
        nextSteps: [],
        connectedFrom: []
      }
      
      await saveRouteStep(newStep)
    } catch (error) {
      console.error('Error creating step from template:', error)
    }
  }

  const handleDeleteStep = async (stepId: string) => {
    try {
      await deleteRouteStep(stepId)
    } catch (error) {
      console.error('Error deleting step:', error)
    }
  }

  const toggleCardExpansion = (stepId: string) => {
    if (!stepId) return
    setExpandedCards(prev => {
      const newSet = new Set(prev)
      if (newSet.has(stepId)) {
        newSet.delete(stepId)
      } else {
        newSet.add(stepId)
      }
      return newSet
    })
  }

  return (
    <div className="min-h-screen bg-background">
      <Header />
      <main className="container mx-auto px-4 py-8">
        <div className="mb-8">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center space-x-2">
              <Route className="h-6 w-6 text-primary" />
              <h1 className="text-3xl font-bold">Route Dashboard</h1>
              <Badge variant="secondary">Administrator</Badge>
            </div>
            <Button onClick={handleAddNewStep}>
              <Plus className="mr-2 h-4 w-4" />
              Add New Step
            </Button>
          </div>
          <p className="text-muted-foreground">
            Configure career path routes and steps for aspiring airline pilots
          </p>
        </div>

        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3 mb-8">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Total Steps</CardTitle>
              <Route className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{routeSteps.length}</div>
              <p className="text-xs text-muted-foreground">
                Active route steps
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Published</CardTitle>
              <Trophy className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                {routeSteps.filter(step => step.status === 'published').length}
              </div>
              <p className="text-xs text-muted-foreground">
                Live for customers
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Draft Steps</CardTitle>
              <Settings className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                {routeSteps.filter(step => step.status === 'draft').length}
              </div>
              <p className="text-xs text-muted-foreground">
                In development
              </p>
            </CardContent>
          </Card>
        </div>

        <div className="space-y-6">
          <div className="flex items-center justify-between">
            <h2 className="text-2xl font-semibold">Career Path Steps</h2>
            <div className="flex items-center space-x-2">
              <Badge variant="outline">Drag to reorder</Badge>
            </div>
          </div>

          <div className="space-y-4">
            {routeSteps.map((step, index) => {
              const IconComponent = iconMap[step.icon as keyof typeof iconMap] || GraduationCap
              if (!step.id) return null // Skip steps without IDs
              
              return (
                <div key={step.id} className="relative">
                  <Card className={`transition-all hover:shadow-md ${
                    step.status === 'published' ? 'border-green-200 bg-green-50/50' : 'border-yellow-200 bg-yellow-50/50'
                  }`}>
                    <CardHeader>
                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-4">
                          <div className="flex items-center justify-center w-12 h-12 rounded-full bg-primary/10">
                            <IconComponent className="h-6 w-6 text-primary" />
                          </div>
                          <div className="flex-1">
                            <div className="flex items-center space-x-2 mb-1">
                              <CardTitle className="text-lg">{step.title}</CardTitle>
                              {step.mandatory && (
                                <Badge variant="destructive" className="text-xs">
                                  Mandatory
                                </Badge>
                              )}
                              <Badge variant={step.status === 'published' ? 'default' : 'secondary'}>
                                {step.status}
                              </Badge>
                            </div>
                            <CardDescription>
                              <div 
                                dangerouslySetInnerHTML={{ __html: step.description }}
                              />
                            </CardDescription>
                          </div>
                        </div>
                         <div className="flex items-center space-x-2">
                           <Button 
                             variant="ghost" 
                             size="sm"
                             onClick={() => toggleCardExpansion(step.id)}
                           >
                             {expandedCards.has(step.id) ? (
                               <ChevronUp className="h-4 w-4" />
                             ) : (
                               <ChevronDown className="h-4 w-4" />
                             )}
                           </Button>
                           <Button 
                             variant="outline" 
                             size="sm"
                             onClick={() => handleEditStep(step)}
                           >
                             <Edit3 className="h-4 w-4 mr-2" />
                             Edit
                           </Button>
                           <AlertDialog>
                             <AlertDialogTrigger asChild>
                               <Button variant="outline" size="sm" className="text-destructive hover:text-destructive">
                                 <Trash2 className="h-4 w-4" />
                               </Button>
                             </AlertDialogTrigger>
                             <AlertDialogContent>
                               <AlertDialogHeader>
                                 <AlertDialogTitle>Delete Route Step</AlertDialogTitle>
                                 <AlertDialogDescription>
                                   Are you sure you want to delete "{step.title}"? This action cannot be undone and will remove all associated topics and connections.
                                 </AlertDialogDescription>
                               </AlertDialogHeader>
                               <AlertDialogFooter>
                                 <AlertDialogCancel>Cancel</AlertDialogCancel>
                                 <AlertDialogAction 
                                   onClick={() => handleDeleteStep(step.id)}
                                   className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
                                 >
                                   Delete
                                 </AlertDialogAction>
                               </AlertDialogFooter>
                             </AlertDialogContent>
                           </AlertDialog>
                         </div>
                      </div>
                    </CardHeader>
                    
                    {expandedCards.has(step.id) && (
                      <CardContent>
                        <div className="space-y-4">
                          <div>
                            <h4 className="font-medium mb-2">Overview</h4>
                            <div 
                              className="text-sm text-muted-foreground prose prose-sm" 
                              dangerouslySetInnerHTML={{ __html: step.overview }}
                            />
                          </div>
                          
                          <div>
                            <h4 className="font-medium mb-2">Key Topics ({step.details.length})</h4>
                            <div className="grid grid-cols-1 gap-3">
                                 {step.details.map((detail, idx) => {
                                  const remainingHours = detail.flightHours ? Math.max(0, detail.flightHours - totalHours) : null
                                  return (
                                    <div key={`${step.id}-${idx}`} className="text-sm bg-background/50 p-3 rounded border">
                                      <div className="flex items-start space-x-3">
                                        <Checkbox 
                                          className="mt-0.5"
                                          checked={detail.checked}
                                          onCheckedChange={(checked) => {
                                            if (step.id) {
                                              updateStepDetailChecked(step.id, idx, checked as boolean)
                                            }
                                          }}
                                        />
                                      <div className="flex-1">
                                        <div className="font-medium text-foreground mb-1">{detail.title}</div>
                                        <div 
                                          className="text-muted-foreground text-xs mb-2 prose prose-xs" 
                                          dangerouslySetInnerHTML={{ __html: detail.description }}
                                        />
                                        {detail.flightHours && (
                                          <div className="flex items-center space-x-2">
                                            <Badge variant="outline" className="text-xs">
                                              {detail.flightHours} hours required
                                            </Badge>
                                            {remainingHours !== null && (
                                              <Badge variant={remainingHours === 0 ? "default" : "secondary"} className="text-xs">
                                                {remainingHours === 0 ? "Complete!" : `${remainingHours} hours remaining`}
                                              </Badge>
                                            )}
                                          </div>
                                        )}
                                        {step.allowCustomerReorder && (
                                          <Badge variant="outline" className="mt-2 text-xs">
                                            Customer can reorder
                                          </Badge>
                                        )}
                                      </div>
                                    </div>
                                   </div>
                                 )
                               })}
                             </div>
                           </div>

                          {step.connectedFrom && step.connectedFrom.length > 0 && (
                            <div className="flex items-center space-x-2 pt-2 border-t">
                              <span className="text-sm font-medium">Connected from:</span>
                              <Badge variant="outline">
                                Step {step.connectedFrom[0]}
                              </Badge>
                            </div>
                          )}
                        </div>
                      </CardContent>
                    )}
                    
                    {!expandedCards.has(step.id) && (
                      <CardContent className="pt-0">
                        <div className="text-sm text-muted-foreground">
                          {step.details.length} key topics • Click to expand
                        </div>
                      </CardContent>
                    )}
                  </Card>

                  {/* Connection Arrow */}
                  {index < routeSteps.length - 1 && (
                    <div className="flex justify-center py-4">
                      <div className="flex items-center justify-center w-8 h-8 rounded-full bg-primary/10">
                        <ArrowRight className="h-4 w-4 text-primary" />
                      </div>
                    </div>
                  )}
                </div>
              )
            })}
          </div>
        </div>

        <EditRouteStepDialog
          step={editingStep}
          open={editDialogOpen}
          onOpenChange={setEditDialogOpen}
          onSave={handleSaveStep}
        />

        <StepTemplateSelectionDialog
          open={templateDialogOpen}
          onOpenChange={setTemplateDialogOpen}
          onSelectTemplate={handleSelectTemplate}
        />
      </main>
    </div>
  )
}